package konsistensi;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import konsistensi.table_prediksi;
import java.awt.Component;
import java.awt.Image;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.lang.String;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.Collections;
import static java.util.Collections.list;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 *
 * @author user
 */
public class saham extends javax.swing.JFrame {
List<String> akun=new ArrayList<>();
List<String> sva=new ArrayList<>();
Connection conn;

    /**
     * Creates new form NewJFrame
     */
    public saham(String input) {
        
        initComponents();
        akun.add(input);
        
        addTableHeader();
        connecrDb();
        
    }
    
    table_prediksi tableprediksi=new table_prediksi();
    
    
    DefaultTableModel model;
    DefaultTableModel model2;
    DefaultTableModel model3;
        List<Double> tablePr1 = new ArrayList<>();
        List<Double> tablePr2 = new ArrayList<>();
        List<Double> tablePr2q = new ArrayList<>();
        List<Double> tablePr3 = new ArrayList<>();
        List<Double> tablePr4 = new ArrayList<>();
        List<Double> tablePr5 = new ArrayList<>();
        List<Double> tablePr6 = new ArrayList<>();
        List<Double> colum0 = new ArrayList<>();
        List<Double> colum1 = new ArrayList<>();
        List<Double> colum2 = new ArrayList<>();
        List<Double> colum3 = new ArrayList<>();
        List<Double> colum4 = new ArrayList<>();
        List<Double> colum5 = new ArrayList<>();
        List<Double> Encludion = new ArrayList<>();

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
     public void connecrDb(){
       /*login_form lf=new login_form();
       String a=lf.login_text.getText();
       String b=lf.lp_login.getText();
       */
         String a=akun.get(0);
         System.out.println("aduah "+a);
         String aa;
         try{
            Class.forName("com.mysql.jdbc.Driver");
           conn=DriverManager.getConnection("jdbc:mysql://localhost/"+a,"root","");
            
            //Statement stat = conn.createStatement();
            //int myresult=stat.executeUpdate("CREATE DATABASE IF NOT EXISTS DB_saham");
            
           
            //return conn;
        }catch(Exception e ){
            e.printStackTrace();
        }
        //return null;
    }
    
   
    public void addTableHeader() {
        model = (DefaultTableModel) jTable1.getModel();
        Object[] newIdentifiers1 = new Object[]{"Nama", "Open", "Closed", "High", "Low", "volume"};
        model.setColumnIdentifiers(newIdentifiers1);
        //============================================================
        model2 = (DefaultTableModel) jTable2.getModel();
        Object[] newIdentifiers2 = new Object[]{"Open", "Closed", "High", "Low", "volume"};
        model2.setColumnIdentifiers(newIdentifiers2);
        
        model3 = (DefaultTableModel) jTable3.getModel();
        Object[] newIdentifiers3 = new Object[]{"Encludions"};
        model3.setColumnIdentifiers(newIdentifiers3);
        //Get Image column and override  TableCellRenderer class component method (getTableCellRendererComponent)
        ///jTable1.getColumn("Image").setCellRenderer(new AddDataToJTable.myTableCellRenderer());

    }
    /*public void tb(String sa){
            sva.add(sa);
            String s=sva.get(0);
            
    }*/
    
    
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setText("import");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 20, 130, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 910, 430));

        jButton2.setText("Hasil Prediksi");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 470, 100, -1));

        jButton3.setText("test");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 50, 130, -1));

        jButton4.setText("save to sql");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 110, 120, 30));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 450, 531, 240));

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 450, 310, 240));

        jButton6.setText("Import");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 150, 100, -1));

        jButton7.setText("test");
        getContentPane().add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 190, 100, -1));

        jButton9.setText("save");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton9, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 80, 130, -1));

        jButton10.setText("save as excel");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton10, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 230, -1, -1));

        jButton8.setText("Enclud");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 510, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private int getStrToInt(String[] aray) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
////setting table

    //private void connecrDb() {
   //     throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
   // }

    class myTableCellRenderer implements TableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {

//            Change Image column minimum width and maximum width
            //TableColumn tb = jTable1.getColumn("Image");
            //tb.setMaxWidth(60);
            //tb.setMinWidth(60);
            jTable1.setRowHeight(100);
            return (Component) value;

        }

    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        File excelFile;
        FileInputStream excelFIS = null;
        BufferedInputStream excelBIS = null;
        XSSFWorkbook excelImportToJTable = null;
        String defaultCurrentDirectoryPath = "C:\\Users\\Authentic\\Desktop";
        JFileChooser excelFileChooser = new JFileChooser(defaultCurrentDirectoryPath);
        excelFileChooser.setDialogTitle("Select Excel File");
        FileNameExtensionFilter fnef = new FileNameExtensionFilter("EXCEL FILES", "xls", "xlsx", "xlsm");
        excelFileChooser.setFileFilter(fnef);
        int excelChooser = excelFileChooser.showOpenDialog(null);
        if (excelChooser == JFileChooser.APPROVE_OPTION) {
            try {
                excelFile = excelFileChooser.getSelectedFile();
                excelFIS = new FileInputStream(excelFile);
                excelBIS = new BufferedInputStream(excelFIS);
                excelImportToJTable = new XSSFWorkbook(excelBIS);
                XSSFSheet excelSheet = excelImportToJTable.getSheetAt(0);
                int hitung_row = excelSheet.getLastRowNum();
                for (int row = 0; row <= hitung_row /*excelSheet.getLastRowNum()*/; row++) {
                    
                    
                    XSSFRow excelRow = excelSheet.getRow(row);
                    //int olom = excelRow.getLastCellNum();

                    ///for(int column=0;column<olom;column++){
                        //System.out.println(column);
                    //System.out.println(row);
                    //System.out.println("--");
                    XSSFCell excelName = excelRow.getCell(0);
                    XSSFCell excelGender = excelRow.getCell(1);
                    XSSFCell excelProgrammingLanguage = excelRow.getCell(2);
                    XSSFCell excelSubject = excelRow.getCell(3);
                    XSSFCell excelImage = excelRow.getCell(4);
                    XSSFCell excelucok = excelRow.getCell(5);

                    //JLabel excelJL = new JLabel(new ImageIcon(new ImageIcon(excelImage.getStringCellValue()).getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH)));
                    model.addRow(new Object[]{excelName, excelGender, excelProgrammingLanguage, excelSubject, excelImage, excelucok});

                    // }
                }
                JOptionPane.showMessageDialog(null, "Imported Successfully !!.....");
            } catch (IOException iOException) {
                JOptionPane.showMessageDialog(null, iOException.getMessage());
            } finally {
                try {
                    if (excelFIS != null) {
                        excelFIS.close();
                    }
                    if (excelBIS != null) {
                        excelBIS.close();
                    }
                    if (excelImportToJTable != null) {
                        excelImportToJTable.close();
                    }
                } catch (IOException iOException) {
                    JOptionPane.showMessageDialog(null, iOException.getMessage());
                }
            }
        }
        System.out.println(model);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        //table prediksi
        tableprediksi.setVisible(true);
        //prevent the frame from closing the parent frame
        tableprediksi.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        /*for (int x = 0; x < tablePr1.size(); x++) {
            Double o = tablePr1.get(x);
            Double cl = tablePr2.get(x);
            Double h = tablePr3.get(x);
            Double l = tablePr4.get(x);
            Double v = tablePr5.get(x);
            Double e = tablePr6.get(x);
            tableprediksi.model3.addRow(new Object[]{o, cl, h, l, v,e});
        
        }*/
            Double o = colum1.get(5);
            DecimalFormat oo = new DecimalFormat("#.###");
            String ooo = oo.format(o);
            
            Double cl = tablePr2q.get(0);
            DecimalFormat df = new DecimalFormat("#.###");
            String precl = df.format(cl);
            
            Double h = colum3.get(5);
            DecimalFormat hh = new DecimalFormat("#.###");
            String hhh = hh.format(h);
            
            Double l = colum4.get(5);
            DecimalFormat ll = new DecimalFormat("#.###");
            String lll = ll.format(l);
            
            Double v = colum5.get(5);
            /*Double e = tablePr6.get(2);*/
            DecimalFormat dfer = new DecimalFormat("#.###");
            String vep = dfer.format(v);
            
            tableprediksi.model3.addRow(new Object[]{ooo, precl, hhh, lll, vep});
            
            String gue="Open            : "+ooo+" => nilai open ini di ambil dari nilai open terahkir";
            String gue1="close Prediksi : "+precl+" => nilai ini ialah nilai prediksi harga penutupan";
            String gue2="High           : "+hhh+" nilai high ini di ambil dari nilai high terahkir";
            String gue3="low            : "+lll+" nilai low ini di ambil dari nilai low terahkir";
            String gue4="Volume         : "+vep+" nilai volume ini di ambil dari nilai volume terahkir";
            String spasi;
            tableprediksi.jTextArea_laporan.setText(gue+"\n"+gue1+"\n"+gue2+"\n"+gue3+"\n"+gue4);
            
            
            
            /*System.out.println("Laporan data prediksi");
                System.out.println("Open : "+o);
                    System.out.println("Prediksi Close : "+precl);
                        System.out.println("High : "+h);
                            System.out.println("Low : "+l);
                                System.out.println("Volume : "+vep);
        */
        
        
        
        

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        /// String a=jTable1.getColumnName(1); >mendapatkan nama colum
        List<String[]> tables1 = new ArrayList<>();
        
        List<Double> perkumpulan1 = new ArrayList<>();
        
        List<Double> Encludion2 = new ArrayList<>();
        List<Double> Encludion3 = new ArrayList<>();
        List<Double> EncludionF = new ArrayList<>();

        List<Double> epen = new ArrayList<>();
        List<Double> elose = new ArrayList<>();
        List<Double> eigh = new ArrayList<>();
        List<Double> eow = new ArrayList<>();
        List<Double> eolume = new ArrayList<>();

        List<String> Open = new ArrayList<>();
        List<String> Close = new ArrayList<>();
        List<String> High = new ArrayList<>();
        List<String> Low = new ArrayList<>();
        List<String> Volume = new ArrayList<>();
        int selek = jTable1.getRowCount();
        int col = jTable1.getColumnCount();
        int seleka = jTable1.getRowCount();
        int cola = jTable1.getColumnCount();
        String cellval;
        int row;
        int c;
        int xi=seleka - 6;
        //col=col-1;
        String[] rowsave = new String[col];
        for (row = xi; row < jTable1.getModel().getRowCount(); row++) {

            for (c = 1; c < jTable1.getModel().getColumnCount(); c++) {
                cellval = jTable1.getModel().getValueAt(row, c).toString();
                //String[] rowsave=new String[2];
                rowsave[c] = cellval;
            //mengambil value
                
                tables1.add(rowsave);
                rowsave = new String[col];

            }
           
        }
        ///=====================================================================
        int x;

        double[] al;
        al = new double[tables1.size()];
        for (x = 0; x < tables1.size(); x++) {
            for (String loop : tables1.get(x)) {
                String gt = loop;

                if (gt == null) {

               } else {
                    double a = Double.parseDouble(gt);
                      System.out.println("open "+a);
                    colum0.add(a);
                }

            }
        }
        //=====================================================================
        double alo;
        int xopen = 0;///open
        int xclose = 1;///open
        int xhigh = 2;///open
        int xlow = 3;///open
        int xvolume = 4;///open

        for (x = 0; x < colum0.size(); x++) {

            alo = colum0.get(x);
            System.out.println("colum "+alo);
            if (x == xopen) {
                colum1.add(alo);
                System.out.println("open "+xopen);
                xopen = xopen + 5;
                
            } else if (x == xclose) {
                colum2.add(alo);
                System.out.println("close "+xclose);
                xclose = xclose + 5;
            } else if (x == xhigh) {
                colum3.add(alo);
                System.out.println("high "+xhigh);
                xhigh = xhigh + 5;
            } else if (x == xlow) {
                colum4.add(alo);
                System.out.println("low "+xlow);
                xlow = xlow + 5;
            } else if (x == xvolume) {
                colum5.add(alo);
                System.out.println("volume"+xvolume);
                xvolume = xvolume + 5;
            }

           
        }

        Double normalisasi;
        Double normalisasi2;
        Double normalisasi3;
        String normalisasi4;

        Double m = Collections.max(colum1);
        Double mi = Collections.min(colum1);
        ///mengalikan array list double =>open
        System.out.println("===============================================");
        System.out.println(colum1.get(0));
        System.out.println(" MAX VALUE NYA =======> " + m);
        System.out.println(" Min VALUE NYA =======> " + mi);
        System.out.println("===============================================");

        for (x = 0; x < colum1.size(); x++) {
            normalisasi = colum1.get(x) - Collections.min(colum1);
            normalisasi2 = Collections.max(colum1) - Collections.min(colum1);
            normalisasi3 = normalisasi / normalisasi2;
            System.out.printf("Hasil normalisasi ===>[%d] = [ %.3f ]", x, normalisasi3);
            System.out.println();
            DecimalFormat df = new DecimalFormat("#.###");
            normalisasi4 = df.format(normalisasi3);
            perkumpulan1.add(normalisasi3);
            Open.add(normalisasi4);
            epen.add(normalisasi3);

        }
        ///mengalikan array list double =>closed
        /*Double m2=Collections.max(colum2);
         Double mi2=Collections.min(colum2);
         System.out.println("===============================================");
         System.out.println(colum2.get(0));
         System.out.println(" MAX VALUE NYA =======> "+m2);
         System.out.println(" Min VALUE NYA =======> "+mi2);
         System.out.println("===============================================");
         */
        for (x = 0; x < colum2.size(); x++) {
            double gw = colum2.get(x);
            DecimalFormat df = new DecimalFormat("#.###");
            normalisasi4 = df.format(gw);
            Close.add(normalisasi4);
            elose.add(gw);
            /*normalisasi=colum2.get(x)-Collections.min(colum2);
             normalisasi2=Collections.max(colum2)-Collections.min(colum2);
             normalisasi3=normalisasi/normalisasi2;
             System.out.printf("Hasil normalisasi ===>[%d] = [ %.3f ]",x,normalisasi3);
             System.out.println();*/
            perkumpulan1.add(gw);
        }
        ///mengalikan array list double
        Double m3 = Collections.max(colum3);
        Double mi3 = Collections.min(colum3);
        System.out.println("===============================================");
        System.out.println(colum3.get(0));
        System.out.println(" MAX VALUE NYA =======> " + m3);
        System.out.println(" Min VALUE NYA =======> " + mi3);
        System.out.println("===============================================");

        for (x = 0; x < colum3.size(); x++) {
            normalisasi = colum3.get(x) - Collections.min(colum3);
            normalisasi2 = Collections.max(colum3) - Collections.min(colum3);
            normalisasi3 = normalisasi / normalisasi2;
            System.out.printf("Hasil normalisasi ===>[%d] = [ %.3f ]", x, normalisasi3);
            System.out.println();
            DecimalFormat df = new DecimalFormat("#.###");
            normalisasi4 = df.format(normalisasi3);
            perkumpulan1.add(normalisasi3);
            High.add(normalisasi4);
            eigh.add(normalisasi3);
        }
        ///mengalikan array list double
        Double m4 = Collections.max(colum4);
        Double mi4 = Collections.min(colum4);
        System.out.println("===============================================");
        System.out.println(colum4.get(0));
        System.out.println(" MAX VALUE NYA =======> " + m4);
        System.out.println(" Min VALUE NYA =======> " + mi4);
        System.out.println("===============================================");

        for (x = 0; x < colum4.size(); x++) {
            double por = colum4.get(x);
            perkumpulan1.add(por);
            normalisasi = colum4.get(x) - Collections.min(colum4);
            normalisasi2 = Collections.max(colum4) - Collections.min(colum4);
            normalisasi3 = normalisasi / normalisasi2;
            System.out.printf("Hasil normalisasi ===>[%d] = [ %.3f ]", x, normalisasi3);
            System.out.println();
            DecimalFormat df = new DecimalFormat("#.###");
            normalisasi4 = df.format(normalisasi3);
            perkumpulan1.add(normalisasi3);
            Low.add(normalisasi4);
            eow.add(normalisasi3);
        }
        ///mengalikan array list double
        Double m5 = Collections.max(colum5);
        Double mi5 = Collections.min(colum5);
        System.out.println("===============================================");
        System.out.println(colum5.get(0));
        System.out.println(" MAX VALUE NYA =======> " + m5);
        System.out.println(" Min VALUE NYA =======> " + mi5);
        System.out.println("===============================================");

        for (x = 0; x < colum5.size(); x++) {
            normalisasi = colum5.get(x) - Collections.min(colum5);
            normalisasi2 = Collections.max(colum5) - Collections.min(colum5);
            normalisasi3 = normalisasi / normalisasi2;
            System.out.printf("Hasil normalisasi ===>[%d] = [ %.3f ]", x, normalisasi3);
            System.out.println();
            DecimalFormat df = new DecimalFormat("#.###");
            normalisasi4 = df.format(normalisasi3);
            perkumpulan1.add(normalisasi3);
            Volume.add(normalisasi4);
            eolume.add(normalisasi3);
        }
        ///############################################################################################################

        double opene;
        double closee;
        double highe;
        double lowe;
        double volumee;
        double total;

        for (x = 0; x < colum4.size(); x++) {
            String o = Open.get(x);
            String cl = Close.get(x);
            String h = High.get(x);
            String l = Low.get(x);
            String v = Volume.get(x);
            model2.addRow(new Object[]{o, cl, h, l, v});
        }
        for (x = 0; x < colum4.size(); x++) {
            opene = epen.get(5) - epen.get(x);
            opene = Math.pow(opene, 2);
            highe = eigh.get(5) - eigh.get(x);
            highe = Math.pow(highe, 2);
            lowe = eow.get(5) - eow.get(x);
            lowe = Math.pow(lowe, 2);
            volumee = eolume.get(5) - eolume.get(x);
            volumee = Math.pow(volumee, 2);
            total = opene + highe + lowe + volumee;
            total = Math.sqrt(total);
            Encludion.add(total);
        }
        System.out.println("===========");
        System.out.println("=======/==");
        System.out.println("======/===");
        System.out.println("=====|=====");
        System.out.println("=====|=====");
        for (x = 0; x < Encludion.size(); x++) {
            double getEnc = Encludion.get(x);
            DecimalFormat df = new DecimalFormat("#.###");
            normalisasi4 = df.format(getEnc);
            System.out.println("encludion => " + normalisasi4);
            System.out.println("===========");
            perkumpulan1.add(getEnc);
            Encludion2.add(getEnc);
        }
        /*for(int wer=0;wer<perkumpulan1.size();wer++){
         double per=perkumpulan1.get(wer);
         System.out.println("|["+wer+"]"+per+"|");
         System.out.println("|_______|");
         }*/
        /*double[] set=new double[3];
         double mx=Collections.max(Encludion);
         double mn=Collections.min(Encludion);
         double k=Encludion.get(3);
         int xo=1;
         for(x=0;x<Encludion.size();x++){
         double tet=Encludion.get(x);
           
         if(Encludion.get(x)==k||Encludion.get(x)>=k&&Encludion.get(x)<=k){
         set[xo]=tet;
               
         Encludion2.add(set);
         xo++;
         }
           
         }
         double size=Encludion2.size();
         size-=1;
         for(x=0;x<size;x++){
         for(double loop:Encludion2.get(x) ){
         double gt=loop;
             
                
         System.out.println("oke "+gt);
                
            
            
         }
        
         }*/
        System.out.println();
        double tot = Encludion2.get(3);
        for (x = 0; x < Encludion2.size(); x++) {
            double toket = Encludion2.get(x);
            System.out.println("nilai en : " + toket);
            if (Encludion2.get(x) == tot) {
                Encludion3.add(toket);
            } else if (Encludion2.get(x) < Collections.max(Encludion2) && Encludion2.get(x) > Collections.min(Encludion2)) {
                Encludion3.add(toket);
            }
        }
        System.out.println();
        double tote = Encludion3.get(1);
        for (x = 0; x < Encludion3.size(); x++) {
            double nilai_open = epen.get(x);
            double nilai_close = elose.get(x);
            double nilai_high = eigh.get(x);
            double nilai_low = eow.get(x);
            double nilai_volume = eolume.get(x);
            double nilai_en = Encludion3.get(x);
            System.out.println("nilai en : " + nilai_en);
            if (Encludion3.get(x) == tote) {
                EncludionF.add(nilai_en);
                tablePr1.add(nilai_open);
                tablePr2.add(nilai_close);
                tablePr3.add(nilai_high);
                tablePr4.add(nilai_low);
                tablePr5.add(nilai_volume);
                tablePr6.add(nilai_en);
            } else if (((tote == Collections.min(Encludion3)) == Encludion3.get(x) < Collections.max(Encludion3))) {
                EncludionF.add(nilai_en);
                tablePr1.add(nilai_open);
                tablePr2.add(nilai_close);
                tablePr3.add(nilai_high);
                tablePr4.add(nilai_low);
                tablePr5.add(nilai_volume);
                tablePr6.add(nilai_en);
                /*if(Encludion3.get(x)>Collections.min(Encludion3))
                 EncludionF.add(toket3);
                 }else if(tote==Collections.min(Encludion3)){
                 if(Encludion3.get(x)<Collections.max(Encludion3))
                 EncludionF.add(toket3);
                 }*/
           //}else if(Encludion3.get(x)!=Collections.min(Encludion3)){
                //EncludionF.add(toket3);
            } else if (((tote == Collections.max(Encludion3)) == Encludion3.get(x) > Collections.min(Encludion3))) {
                EncludionF.add(nilai_en);
                tablePr1.add(nilai_open);
                tablePr2.add(nilai_close);
                tablePr3.add(nilai_high);
                tablePr4.add(nilai_low);
                tablePr5.add(nilai_volume);
                tablePr6.add(nilai_en);
            }
            /*if(Encludion3.get(x)>Collections.min(Encludion3))
             EncludionF.add(toket3);
             }else if(tote==Collections.min(Encludion3)){
             if(Encludion3.get(x)<Collections.max(Encludion3))
             EncludionF.add(toket3);
             }*/
               //}else if(Encludion3.get(x)!=Collections.min(Encludion3)){
            //EncludionF.add(toket3);

        }

        System.out.println();
        double totet = EncludionF.get(1);
        for (x = 0; x < EncludionF.size(); x++) {
            double toketF = EncludionF.get(x);
            System.out.println("nilai en : " + toketF);

        }
        double cp=tablePr2.get(0)+tablePr2.get(1)+tablePr2.get(2);
        cp=cp/3;
        tablePr2q.add(cp);
        

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        //savesql.setVisible(true);
        //prevent the frame from closing the parent frame
        //savesql.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        String ter=akun.get(0);
        save_to_sql sts= new save_to_sql(ter);
        sts.setVisible(true);
            
        
        


    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        ///Import sql
        String ter=akun.get(0);
        Import_sql slq=new Import_sql(ter);
        slq.setVisible(true);
        
        
        
    }//GEN-LAST:event_jButton6ActionPerformed

    
    
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        //Save to excel
          // TODO add your handling code here:

        FileOutputStream excelFOU = null;
        BufferedOutputStream excelBOU = null;
        XSSFWorkbook excelJTableExporter = null;

        //Choose Location For Saving Excel File
        JFileChooser excelFileChooser = new JFileChooser("C:\\Users\\Authentic\\Desktop");
//        Change Dilog Box Title
        excelFileChooser.setDialogTitle("Save As");
//        Onliny filter files with these extensions "xls", "xlsx", "xlsm"
        FileNameExtensionFilter fnef = new FileNameExtensionFilter("EXCEL FILES", "xls", "xlsx", "xlsm");
        excelFileChooser.setFileFilter(fnef);
        int excelChooser = excelFileChooser.showSaveDialog(null);

//        Check if save button is clicked
        if (excelChooser == JFileChooser.APPROVE_OPTION) {

            try {
                //Import excel poi libraries to netbeans
                excelJTableExporter = new XSSFWorkbook();
                XSSFSheet excelSheet = excelJTableExporter.createSheet("JTable Sheet");
                //            Loop to get jtable columns and rows
                for (int i = 0; i < jTable1.getRowCount(); i++) {
                    XSSFRow excelRow = excelSheet.createRow(i);
                    for (int j = 0; j < jTable1.getColumnCount(); j++) {
                        XSSFCell excelCell = excelRow.createCell(j);
                        excelCell.setCellValue(jTable1.getValueAt(i, j).toString());
                        //Now Get ImageNames From JLabel
                        //get the last column
                        
                    }
                }   //Append xlsx file extensions to selected files. To create unique file names
                excelFOU = new FileOutputStream(excelFileChooser.getSelectedFile() + ".xlsx");
                excelBOU = new BufferedOutputStream(excelFOU);
                excelJTableExporter.write(excelBOU);
                JOptionPane.showMessageDialog(null, "Exported Successfully !!!........");
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            } catch (IOException ex) {
                ex.printStackTrace();
            } finally {
                try {
                    if (excelBOU != null) {
                        excelBOU.close();
                    }
                    if (excelFOU != null) {
                        excelFOU.close();
                    }
                    if (excelJTableExporter != null) {
                        excelJTableExporter.close();
                    }
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }

        }

        
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        FileOutputStream excelFOU = null;
        BufferedOutputStream excelBOU = null;
        XSSFWorkbook excelJTableExporter = null;

        //Choose Location For Saving Excel File
        JFileChooser excelFileChooser = new JFileChooser("C:\\Users\\Authentic\\Desktop");
//        Change Dilog Box Title
        excelFileChooser.setDialogTitle("Save As");
//        Onliny filter files with these extensions "xls", "xlsx", "xlsm"
        FileNameExtensionFilter fnef = new FileNameExtensionFilter("EXCEL FILES", "xls", "xlsx", "xlsm");
        excelFileChooser.setFileFilter(fnef);
        int excelChooser = excelFileChooser.showSaveDialog(null);

//        Check if save button is clicked
        if (excelChooser == JFileChooser.APPROVE_OPTION) {

            try {
                //Import excel poi libraries to netbeans
                excelJTableExporter = new XSSFWorkbook();
                XSSFSheet excelSheet = excelJTableExporter.createSheet("JTable Sheet");
                //            Loop to get jtable columns and rows
                for (int i = 0; i < jTable1.getRowCount(); i++) {
                    XSSFRow excelRow = excelSheet.createRow(i);
                    for (int j = 0; j < jTable1.getColumnCount(); j++) {
                        XSSFCell excelCell = excelRow.createCell(j);
                        excelCell.setCellValue(jTable1.getValueAt(i, j).toString());
                        //Now Get ImageNames From JLabel
                        //get the last column
                        
                    }
                }   //Append xlsx file extensions to selected files. To create unique file names
                excelFOU = new FileOutputStream(excelFileChooser.getSelectedFile() + ".xlsx");
                excelBOU = new BufferedOutputStream(excelFOU);
                excelJTableExporter.write(excelBOU);
                JOptionPane.showMessageDialog(null, "Exported Successfully !!!........");
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            } catch (IOException ex) {
                ex.printStackTrace();
            } finally {
                try {
                    if (excelBOU != null) {
                        excelBOU.close();
                    }
                    if (excelFOU != null) {
                        excelFOU.close();
                    }
                    if (excelJTableExporter != null) {
                        excelJTableExporter.close();
                    }
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }

        }

        
        
        
        
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        String normalisasi4;
        for (int x = 0; x < Encludion.size(); x++) {
            double enc=Encludion.get(x);
            DecimalFormat dfe = new DecimalFormat("#.###");
            normalisasi4 = dfe.format(enc);
            model3.addRow(new Object[]{normalisasi4});
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(saham.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(saham.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(saham.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(saham.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new saham().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    public static javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    // End of variables declaration//GEN-END:variables
}
